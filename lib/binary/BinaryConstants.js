"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LocationType_1 = require("../data/LocationType");
const IDENTIFIER = "binary";
const ROUND_FACTOR = 0.5;
const BITS_PER_BYTE = 8;
const DECA_MICRO_DEG_FACTOR = 100000.0;
const BIT24FACTOR = 46603.377778;
const BIT24FACTOR_REVERSED = 1 / BIT24FACTOR;
const BEARING_SECTOR = 11.25;
const LENGTH_INTERVAL = 58.6;
const IS_POINT = 1;
const IS_NOT_POINT = 0;
const AREA_CODE_CIRCLE = 0;
const AREA_CODE_RECTANGLE = 2;
const AREA_CODE_GRID = 2;
const AREA_CODE_POLYGON = 1;
const AREA_CODE_CLOSEDLINE = 3;
const IS_NOT_AREA = 0;
const HAS_ATTRIBUTES = 1;
const HAS_NO_ATTRIBUTES = 0;
const HEADER_SIZE = 1;
const FIRST_LRP_SIZE = 9;
const LRP_SIZE = 7;
const LAST_LRP_SIZE = 6;
const ABS_COORD_SIZE = 6;
const RELATIVE_OFFSET_LENGTH = 0.390625;
const MIN_BYTES_LINE_LOCATION = HEADER_SIZE + FIRST_LRP_SIZE + LAST_LRP_SIZE;
const MIN_BYTES_CLOSED_LINE_LOCATION = HEADER_SIZE + FIRST_LRP_SIZE + 2;
const GEOCOORD_SIZE = HEADER_SIZE + ABS_COORD_SIZE;
const MIN_BYTES_POINT_LOCATION = GEOCOORD_SIZE;
const BINARY_VERSION_2 = 2;
const BINARY_VERSION_3 = 3;
const LATEST_BINARY_VERSION = BINARY_VERSION_3;
const HAS_OFFSET = 1;
const OFFSET_BUCKETS = 256;
const POINT_ALONG_LINE_SIZE = HEADER_SIZE + FIRST_LRP_SIZE + LAST_LRP_SIZE;
const RELATIVE_COORD_SIZE = 4;
const SMALL_RADIUS_BITS = 8;
const MEDIUM_RADIUS_BITS = 16;
const LARGE_RADIUS_BITS = 24;
const EXTRA_LARGE_RADIUS_BITS = 32;
const DIMENSION_SIZE = 2;
const RECTANGLE_SIZE = HEADER_SIZE + ABS_COORD_SIZE + RELATIVE_COORD_SIZE;
const LARGE_RECTANGLE_SIZE = HEADER_SIZE + ABS_COORD_SIZE + ABS_COORD_SIZE;
const GRID_SIZE = RECTANGLE_SIZE + 2 * DIMENSION_SIZE;
const LARGE_GRID_SIZE = LARGE_RECTANGLE_SIZE + 2 * DIMENSION_SIZE;
const MIN_BYTES_POLYGON = HEADER_SIZE + ABS_COORD_SIZE + 2 * RELATIVE_COORD_SIZE;
const POINT_OFFSET_SIZE = 1;
const POINT_WITH_ACCESS_SIZE = HEADER_SIZE + FIRST_LRP_SIZE + LAST_LRP_SIZE + RELATIVE_COORD_SIZE;
const POINT_LOCATION_VERSION = 3;
const POINT_LOCATION_TYPES = new Set([LocationType_1.default.GEO_COORDINATES, LocationType_1.default.POI_WITH_ACCESS_POINT, LocationType_1.default.POINT_ALONG_LINE]);
const AREA_LOCATION_VERSION = 3;
const AREA_LOCATION_TYPES = new Set([LocationType_1.default.CIRCLE, LocationType_1.default.GRID, LocationType_1.default.CLOSED_LINE, LocationType_1.default.RECTANGLE, LocationType_1.default.POLYGON]);
exports.default = {
    IDENTIFIER,
    ROUND_FACTOR,
    BITS_PER_BYTE,
    DECA_MICRO_DEG_FACTOR,
    BIT24FACTOR,
    BIT24FACTOR_REVERSED,
    BEARING_SECTOR,
    LENGTH_INTERVAL,
    IS_POINT,
    IS_NOT_POINT,
    AREA_CODE_CIRCLE,
    AREA_CODE_RECTANGLE,
    AREA_CODE_GRID,
    AREA_CODE_POLYGON,
    AREA_CODE_CLOSEDLINE,
    IS_NOT_AREA,
    HAS_ATTRIBUTES,
    HAS_NO_ATTRIBUTES,
    HEADER_SIZE,
    FIRST_LRP_SIZE,
    LRP_SIZE,
    LAST_LRP_SIZE,
    ABS_COORD_SIZE,
    RELATIVE_OFFSET_LENGTH,
    MIN_BYTES_LINE_LOCATION,
    MIN_BYTES_CLOSED_LINE_LOCATION,
    GEOCOORD_SIZE,
    MIN_BYTES_POINT_LOCATION,
    BINARY_VERSION_2,
    BINARY_VERSION_3,
    LATEST_BINARY_VERSION,
    HAS_OFFSET,
    OFFSET_BUCKETS,
    POINT_ALONG_LINE_SIZE,
    RELATIVE_COORD_SIZE,
    SMALL_RADIUS_BITS,
    MEDIUM_RADIUS_BITS,
    LARGE_RADIUS_BITS,
    EXTRA_LARGE_RADIUS_BITS,
    DIMENSION_SIZE,
    RECTANGLE_SIZE,
    LARGE_RECTANGLE_SIZE,
    GRID_SIZE,
    LARGE_GRID_SIZE,
    MIN_BYTES_POLYGON,
    POINT_OFFSET_SIZE,
    POINT_WITH_ACCESS_SIZE,
    POINT_LOCATION_VERSION,
    POINT_LOCATION_TYPES,
    AREA_LOCATION_VERSION,
    AREA_LOCATION_TYPES
};
//# sourceMappingURL=BinaryConstants.js.map